Java概述

Java技术体系

Java程序设计语言

各个硬件平台上的JVM

class文件格式

Java API类库

第三方Java类库

Java历史

1991 James Gosling（java之父） Green Project  Oak

1995年5月23日SunWorld大会改名为Java

"write once run anywhere"

1996年1月23日发布JDK1.0

Java虚拟机

Classic Vm

外挂JIT(Just In Time)

applet

AWT等

1997年2月19日发布JDK1.1

JDBC

JavaBeans

RMI

语法加入内部类及反射

1997年2月19日-1998年4月8日

期间发行了1.1 - 1.1.8 九个小版本

JDK1.1.4之后开始有工程代号

JDK1.1.4-Sparkler(宝石)

JDK1.1.5-Pumpkin(南瓜)

JDK1.1.6-Abigail(阿比盖尔)

JDK1.1.7-Brutus(布鲁图)

JDK1.1.8-Chelsea(切尔西)

1998年12月4日JDk1.2-Playground(竞技场)

将技术体系分为三个方向

J2SE

J2ME

J2EE

增加EJB,Java Plug-in,JavaIDL,Swing等

三台虚拟机共存

Classic Vm

这个版本中默认使用的虚拟机

HotSpot

由于HotSpot的出现也算是内置JIT

Exact VM

运行在Sun的Solaris系统（类unix系统）

新增语法 strictfp 关键字

主要作用与类、或者非抽象方法上

计算遵循IEEE-754规范

IEEE二进制浮点数算数标准

这个关键字并不能解决计算导致的精度的误差,只能解决不同硬件平台计算的误差(wiki上所说的保证可移植性)

https://blog.csdn.net/fbysss/article/details/5186571 详细看这个解释的很明白

加入常用的Collections集合类

2000年5月8日JDK1.3-Kestrel（美洲红隼）

语法加入数学运算、Timer API

2002年2月13日JDK1.4-Merlin（灰背隼）

新特性

NIO

异常链

正则表达式

日志类

XML解析器

XSLT转换器

2004年9月30日JDK1.5-Tiger（老虎）

新特性

自动装箱

泛型

动态注解

枚举

可变长参数

foreach

改进了java内存模型

新增加juc包

2006年12月11日JDK1.6-Mustang (野马)

终结JDK1.2开始的J2EE,J2SE,J2ME命名方式 改为 Java SE,Java EE,Java ME

新特性

提供动态语言支持

提供编译API

微信HTTP服务API

虚拟机方面做了大量的改进

2009年2月19日JDK1.7-Dolphin（海豚）

新特性

二进制字面量 0B开头

八进制 0开头

十六进制 0x开头

数字字面量可以出现下划线为了增强对数值的阅读性，如我们经常把数据用逗号分隔一样。JDK7提供了_对数据分隔

int x = 100_1000;


不能出现在进制标识和数值之间


不能出现在数值开头和结尾

不能出现在小数点旁边

switch语句中可以写入String类型

实例创建的类型推断

Map<String, List<String>> myMap = new HashMap<>();

try-with-resources 语句

try中 必须是java.lang.AutoCloseable的子类对象

2014年3月18日JDK1.8-Spider (蜘蛛)

新特性

接口加入默认方法 default关键字修饰

继承遵守就近类优先原则

Lambda表达式

/**
     * 对Stream去重的补充,
     * 传入一个function来指定你要去重的字段
     * 典型的闭包写法,在不执行第二个distinct的方法发时ConcurrentHashMap<>还在存活
     * @param list
     * @param function
     * @param <T>
     * @param <R>
     * @return
     */
    public static <T, R> List<T> distinct(List<T> list, Function<T, R> function) {
        Predicate<T> distinct = distinct(function);
        List<T> newlist = list.stream().filter(distinct).collect(Collectors.toList());
        return newlist;
    }

    private static <T, R> Predicate<T> distinct(Function<T, R> function) {
        Map<R, Boolean> seen = new ConcurrentHashMap<>();
        return (t) -> seen.putIfAbsent(function.apply(t), Boolean.TRUE) == null;
    }

语法

() -> System.out.println("xx");   无参数，无返回值

(x) -> System.out.println("x");  一个参数，无返回值,此时x外面的括号可以省略 x -> System.out.println("x");

(x,y) -> { int i = x+y ;
            return i; 
		 };  两个参数，有返回值

int i = (x,y) -> x+y;  两个参数有返回值，只有一条语句，则return与大括号都可以不写

(Integer x,Integer y) -> Integer.compare(x,y) 可以不用在括号里写类型，自动做类型推断

函数式接口

java.util.function包

Predicate<T>

boolean test(T t);

Supplier<T>

 T get();

Function<T, R>

R apply(T t);

Consumer<T>

void accept(T t);

函数式接口可以用 @FunctionalInterface(检验接口中是否只有一个抽象方法)修饰，并且接口中只能有一个抽象方法

疑问 Comparator<T> 被@FunctionalInterface修饰 却有两个抽象方法

方法引用

对象::实例方法名

类::静态方法名

类::实例方法名

java.time类库(新的日期时间类库)

java.time.chrono包：这个包为非ISO的日历系统定义了一些API，我们可以在借助这个包中的一些类扩展我们自己的日历系统

例如日本的日历 JapaneseChronology

佛教日历  ThaiBuddhistChronology

伊斯兰教历 HijrahChronology

java.time.format包：这个包很明显了，格式化和解析日期时间对象，一般java.time包中的类都差不多能满足我们的需求了，如果有需要，可以调用这个包下的类自定义解析方式；

例如 DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS");

java.time.temporal包：这个包很有意思，封装了一些获取某个特定日期和时间的接口，比如某月的第一天或最后一天，并且这些方法都是属于特别好认的方法

例如计算某月第一天 localDate.with(TemporalAdjusters.firstDayOfMonth());

java.time.zone包：这个包就是时区相关的类了。

Duration 类来计算时差

stream API

java.util.stream包下

详细看每个方法的注释吧

Collectors工具类

JDk

java语言

工具及工具API(命令后的具体参数用man命令去看,这里不列举 )

java

启动java应用程序

javac

编译工具

javadoc

文档注释生成工具

jar

用于打包、更新、解包java应用程序

javap

反编译工具用于查看字节码

jps

与ps命令类型，纯查看java进程

jmap

用于查看堆内存信息和dump快照

jhat

用于结合jmap使用，分析dump文件（不推荐）用jconsole会更方便

jstack

用于查看栈信息，主要用于看每个线程的状态

jconsole

用于查看jvm运行数据与jvisualvm类似

jstat

用于查看jvm运行数据

jstatd

用于查看jvm运行数据(rmi方式需要加策略文件)

jvisualvm

用于查看jvm运行数据（图形化工具 基于jstat）

jdp

在线断点调试工具

jinfo

打印特定的jvm实例配置信息

JRE(内容太多这里不做具体细分，有兴趣自己百度)

根据平台可分为

JavaSE (Standard Edition)

JavaEE (Enterprise Edition)

JavaME (Micro Edition)

JavaCard
